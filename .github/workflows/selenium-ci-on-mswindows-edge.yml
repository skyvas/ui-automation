name: Selenium CI on Edge

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: windows-latest

    steps:
      # Step 1: Check out the repository code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Java
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '23'
          distribution: 'temurin'

      # Step 3: Install Microsoft Edge and Download EdgeDriver
      - name: Install Edge and Download EdgeDriver
        run: |
          choco install -y microsoft-edge
          EDGE_VERSION=$(powershell "(Get-Item 'C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe').VersionInfo.ProductVersion")
          EDGE_DRIVER_VERSION=${EDGE_VERSION%.*}
          curl -sS -o msedgedriver.zip "https://msedgedriver.azureedge.net/${EDGE_DRIVER_VERSION}/edgedriver_win64.zip"
          tar -xf msedgedriver.zip -C $Env:USERPROFILE
          echo "edgedriver_path=$Env:USERPROFILE\\msedgedriver.exe" >> src/test/resources/config.properties

      # Step 4: Create config.properties dynamically
      - name: Create config.properties
        run: |
          echo "username=${{ secrets.USERNAME }}" >> src/test/resources/config.properties
          echo "password=${{ secrets.PASSWORD }}" >> src/test/resources/config.properties
          echo "headless_mode=${{ secrets.HEADLESS_MODE }}" >> src/test/resources/config.properties
          echo "test_url=${{ secrets.TEST_URL }}" >> src/test/resources/config.properties
          echo "browser=edge" >> src/test/resources/config.properties

      # Step 5: Cache Maven dependencies
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Step 6: Install Maven dependencies
      - name: Install Dependencies
        run: mvn install

      # Step 7: Run Selenium tests
      - name: Run Tests
        run: mvn test

      # Step 8: Generate Allure reports after tests
      - name: Generate Allure Reports
        if: always()
        run: |
          mvn allure:report

      # Step 9: Upload Surefire reports as artifacts
      - name: Upload Surefire reports as artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: surefire-reports
          path: target/surefire-reports

      # Step 10: Upload Screenshots as artifacts only if not empty
      - name: Upload Screenshots as artifacts only if not empty
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: screenshots
          path: target/screenshots

      # Step 11: Upload Allure reports as artifacts
      - name: Upload Allure reports as artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-reports
          path: target/allure-reports
